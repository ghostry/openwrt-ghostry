From: Bernhard Loos <bernhardloos@googlemail.com>

Add MIPS74K ssb core support.
Signed-off-by: George Kashperko <george@znau.edu.ua>
---
 drivers/ssb/driver_mipscore.c |   79 +++++++++++++++++++++++++++++++-
 drivers/ssb/main.c            |    1 
 drivers/ssb/scan.c            |    1 
 include/linux/ssb/ssb_regs.h  |   11 ++++
 4 files changed, 91 insertions(+), 1 deletion(-)
--- linux-3.0.4.orig/drivers/ssb/driver_mipscore.c	2011-09-12 14:18:05.000000000 +0300
+++ linux-3.0.4/drivers/ssb/driver_mipscore.c	2011-09-12 14:18:38.000000000 +0300
@@ -4,6 +4,7 @@
  *
  * Copyright 2005, Broadcom Corporation
  * Copyright 2006, 2007, Michael Buesch <mb@bu3sch.de>
+ * Copyright 2010, Bernhard Loos <bernhardloos@googlemail.com>
  *
  * Licensed under the GNU/GPL. See COPYING for details.
  */
@@ -152,12 +153,82 @@ static void set_irq33k(struct ssb_device
 		    dev->id.coreid, oldirq+2, irq+2);
 }
 
+/* Get the MIPS IRQ assignment for a specified device.
+ * If unassigned, 0 is returned.
+ * If disabled, 5 is returned.
+ * If not supported, 6 is returned.
+ */
+static unsigned int ssb_mips_irq74k(struct ssb_device *dev)
+{
+	struct ssb_device *mdev = dev->bus->mipscore.dev;
+	u32 irqflag;
+	unsigned int irq;
+
+	irqflag = ssb_irqflag(dev);
+	if (irqflag == -1)
+		return 6;
+
+	for (irq = 1; irq <= 4; irq++)
+		if (ssb_read32(mdev, SSB_MIPS74K_INTMASK(irq)) & (1 << irqflag))
+			break;
+
+	if (irq == 5)
+		irq = 0;
+
+	return irq;
+}
+
+static void set_irq74k(struct ssb_device *dev, unsigned int irq)
+{
+	unsigned int oldirq = ssb_mips_irq(dev);
+	struct ssb_bus *bus = dev->bus;
+	struct ssb_device *mdev = bus->mipscore.dev;
+	u32 irqflag = ssb_irqflag(dev);
+
+	BUG_ON(oldirq == 6);
+
+	dev->irq = irq + 2;
+
+	/* clear the old irq */
+	if (irq == 0)
+		ssb_write32(mdev, SSB_MIPS74K_INTMASK(0),
+			    ssb_read32(mdev, SSB_MIPS74K_INTMASK(0)) &
+			    ~(1 << irqflag));
+	else
+		ssb_write32(mdev, SSB_MIPS74K_INTMASK(irq), 0);
+
+	/* assign the new one */
+	if (irq == 0) {
+		ssb_write32(mdev, SSB_MIPS74K_INTMASK(0),
+			    ssb_read32(mdev, SSB_MIPS74K_INTMASK(0)) |
+			    (1 << irqflag));
+	} else {
+		u32 oldirqflag = ssb_read32(mdev, SSB_MIPS74K_INTMASK(irq));
+		if (oldirqflag) {
+			int i;
+			/* backplane irq line is in use, find out who uses it and set user to irq 0*/
+			for (i = 0; i < bus->nr_devices; i++)
+				if ((1 << ssb_irqflag(&bus->devices[i])) == oldirqflag) {
+					set_irq74k(&bus->devices[i], 0);
+					break;
+				}
+		}
+		ssb_write32(mdev, SSB_MIPS74K_INTMASK(irq), 1 << irqflag);
+	}
+
+	ssb_dprintk(KERN_INFO PFX
+		    "set_irq: core 0x%04x, irq %d => %d\n",
+		    dev->id.coreid, oldirq + 2, irq + 2);
+}
+
 static void set_irq(struct ssb_device *dev, unsigned int irq)
 {
 	switch (dev->bus->mipscore.dev->id.coreid) {
 	case SSB_DEV_MIPS:
 	case SSB_DEV_MIPS_3302:
 		return set_irq33k(dev, irq);
+	case SSB_DEV_MIPS_74K:
+		return set_irq74k(dev, irq);
 	default:
 		SSB_BUG_ON(1);
 	}
@@ -282,6 +353,9 @@ void ssb_mipscore_init(struct ssb_mipsco
 	case SSB_DEV_MIPS_3302:
 	        mcore->mips_irq = ssb_mips_irq33k;
 	        break;
+	case SSB_DEV_MIPS_74K:
+		mcore->mips_irq = ssb_mips_irq74k;
+		break;
 	default:
 	        SSB_BUG_ON(1);
 	}
@@ -298,7 +372,8 @@ void ssb_mipscore_init(struct ssb_mipsco
 		ssb_chipco_timing_init(&bus->chipco, ns);
 
 	/* Assign IRQs to all cores on the bus, start with irq line 2, because serial usually takes 1 */
-	for (irq = 2, i = 0; i < bus->nr_devices; i++) {
+	for (irq = (mcore->dev->id.coreid == SSB_DEV_MIPS_74K) ? 1 : 2,
+	     i = 0; i < bus->nr_devices; i++) {
 		int mips_irq;
 		dev = &(bus->devices[i]);
 		mips_irq = ssb_mips_irq(dev);
@@ -317,8 +392,10 @@ void ssb_mipscore_init(struct ssb_mipsco
 			}
 			break;
 		case SSB_DEV_PCI:
+		case SSB_DEV_PCIE:
 		case SSB_DEV_ETHERNET:
 		case SSB_DEV_ETHERNET_GBIT:
+		case SSB_DEV_ETHERNET_GMAC:
 		case SSB_DEV_80211:
 		case SSB_DEV_USB20_HOST:
 			/* These devices get their own IRQ line if available, the rest goes on IRQ0 */
--- linux-3.0.4.orig/drivers/ssb/main.c	2011-09-12 14:17:08.000000000 +0300
+++ linux-3.0.4/drivers/ssb/main.c	2011-09-12 14:18:38.000000000 +0300
@@ -491,6 +491,7 @@ static int ssb_devices_register(struct s
 		case SSB_DEV_PCMCIA:
 		case SSB_DEV_MIPS:
 		case SSB_DEV_MIPS_3302:
+		case SSB_DEV_MIPS_74K:
 		case SSB_DEV_EXTIF:
 			continue;
 		}
--- linux-3.0.4.orig/drivers/ssb/scan.c	2011-09-12 14:18:32.000000000 +0300
+++ linux-3.0.4/drivers/ssb/scan.c	2011-09-12 14:18:38.000000000 +0300
@@ -317,6 +317,7 @@ int ssb_bus_check_core(struct ssb_device
 		break;
 	case SSB_DEV_MIPS:
 	case SSB_DEV_MIPS_3302:
+	case SSB_DEV_MIPS_74K:
 #ifdef CONFIG_SSB_DRIVER_MIPS
 		if (bus->mipscore.dev) {
 			ssb_printk(KERN_WARNING PFX
--- linux-3.0.4.orig/include/linux/ssb/ssb_regs.h	2011-09-12 14:16:32.000000000 +0300
+++ linux-3.0.4/include/linux/ssb/ssb_regs.h	2011-09-12 14:18:38.000000000 +0300
@@ -502,5 +502,16 @@ enum {
 #define SSB_ADM_BASE2			0xFFFF0000	/* Type2 base address for the core */
 #define SSB_ADM_BASE2_SHIFT		16
 
+/* MIPS 74K core registers */
+#define SSB_MIPS74K_CORECTL		0x0000
+#define SSB_MIPS74K_EXCEPTBASE		0x0004
+#define SSB_MIPS74K_BIST		0x000C
+#define SSB_MIPS74K_INTMASK_INT0	0x0014
+#define SSB_MIPS74K_INTMASK(int) ((int) * 4 + SSB_MIPS74K_INTMASK_INT0)
+#define SSB_MIPS74K_NMIMASK		0x002C
+#define SSB_MIPS74K_GPIOSEL		0x0040
+#define SSB_MIPS74K_GPIOOUT		0x0044
+#define SSB_MIPS74K_GPIOEN		0x0048
+#define SSB_MIPS74K_CLKCTLST		0x01E0
 
 #endif /* LINUX_SSB_REGS_H_ */
