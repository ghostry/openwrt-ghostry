From: George Kashperko <george@znau.edu.ua>

Add support for 4716/47162 pmu.
WARNING: This is preliminary stub-like patch in order just to let
4716/47162 chip-based boxes to boot. Dont ever apply this to trees
you can get flashed/used on something else rather than 4716/47162
even by accident.
I've got fully ported version for pmu bus/cpu timings but it is not
tested yet.
Once again - DON'T EVER use this for non 4716/47162.
Signed-off-by: George Kashperko <george@znau.edu.ua>
---
 drivers/ssb/driver_chipcommon_pmu.c       |  161 ++++++++++++++++++++
 drivers/ssb/driver_mipscore.c             |    5 
 drivers/ssb/main.c                        |    9 -
 drivers/ssb/ssb_private.h                 |    4 
 include/linux/ssb/ssb_driver_chipcommon.h |   45 +++++
 5 files changed, 222 insertions(+), 2 deletions(-)
--- linux-3.0.4.orig/drivers/ssb/driver_chipcommon_pmu.c	2011-09-12 14:04:53.000000000 +0300
+++ linux-3.0.4/drivers/ssb/driver_chipcommon_pmu.c	2011-09-12 14:24:01.000000000 +0300
@@ -324,6 +324,13 @@ static void ssb_pmu_pll_init(struct ssb_
 	}
 
 	switch (bus->chip_id) {
+	case 47162:
+	case 0x4716:
+		/* We do not touch the PLL and assume
+		 * the default crystal settings work out-of-the-box. */
+		/* FIXME: g. k. will be adjusted in ssb_pmu5_clock ? */
+		cc->pmu.crystalfreq = 20000;
+		break;
 	case 0x4312:
 	case 0x4325:
 		ssb_pmu1_pllinit_r0(cc, crystalfreq);
@@ -431,6 +438,13 @@ static void ssb_pmu_resources_init(struc
 		 * max_msk = 0x7FFFF
 		 */
 		break;
+	case 47162:
+	case 0x4716:
+		ssb_printk(KERN_INFO PFX
+			   "%s: Resource count %d\n",
+			   __FUNCTION__,
+			   (cc->capabilities & SSB_CHIPCO_PMU_CAP_RESCNT_MASK) >> SSB_CHIPCO_PMU_CAP_RESCNT_SHIFT);
+		break;
 	case 0x4325:
 		/* Power OTP down later. */
 		min_msk = (1 << SSB_PMURES_4325_CBUCK_BURST) |
@@ -504,6 +518,153 @@ static void ssb_pmu_resources_init(struc
 		chipco_write32(cc, SSB_CHIPCO_PMU_MAXRES_MSK, max_msk);
 }
 
+/* query alp/xtal clock frequency */
+static u32 ssb_pmu0_alp_clock_r0(struct ssb_chipcommon *cc)
+{
+	SSB_BUG_ON(1);
+	return 0;
+}
+
+static u32 ssb_pmu0_clockcpu_r0(struct ssb_chipcommon *cc)
+{
+	SSB_BUG_ON(1);
+	return 0;
+}
+
+static u32 ssb_pmu1_alp_clock_r0(struct ssb_chipcommon *cc)
+{
+	SSB_BUG_ON(1);
+	return 0;
+}
+
+static u32 ssb_pmu1_clockcpu_r0(struct ssb_chipcommon *cc)
+{
+	SSB_BUG_ON(1);
+	return 0;
+}
+
+static u32 ssb_pmu_alp_clock(struct ssb_chipcommon *cc)
+{
+	struct ssb_bus *bus = cc->dev->bus;
+
+	SSB_BUG_ON(!(cc->capabilities & SSB_CHIPCO_CAP_PMU));
+	switch (bus->chip_id) {
+	case 0x4328:
+	case 0x5354:
+		return ssb_pmu0_alp_clock_r0(cc);
+	case 0x4325:
+	case 0x4319:
+		return ssb_pmu1_alp_clock_r0(cc);
+	case 4342:
+	case 0x4312:
+	case 0x4322:
+	case 0x4716:
+	case 0x4748:
+	case 43111:
+	case 43112:
+	case 43221:
+	case 43222:
+	case 43224:
+	case 43225:
+	case 43231:
+	case 43421:
+	case 47162:
+		/* always 20Mhz */
+		return 20000 * 1000;
+	default:
+		ssb_printk(KERN_WARNING PFX
+			   "No ALP clock specified for %04X device, "
+			   "pmu rev. %d, using default %d Hz\n",
+			   bus->chip_id, cc->pmu.rev, SSB_CHIPCO_PMU_ALP_CLOCK);
+	}
+	return SSB_CHIPCO_PMU_ALP_CLOCK;
+}
+
+static u32 ssb_pmu5_clock(struct ssb_chipcommon *cc, u32 m)
+{
+	u32 tmp, div, ndiv, p1, p2, fc;
+	u32 pll0 = SSB_PMU4716_MAINPLL_PLL0;
+
+	SSB_BUG_ON(!m || m > 4);
+
+	tmp = ssb_chipco_pll_read(cc, pll0 + SSB_PMU5_PLL_P1P2_OFF);
+	p1 = SSB_PMU5_PLL_P1(tmp);
+	p2 = SSB_PMU5_PLL_P2(tmp);
+
+	tmp = ssb_chipco_pll_read(cc, pll0 + SSB_PMU5_PLL_M14_OFF);
+	div = (tmp >> ((m - 1) * SSB_PMU5_PLL_MDIV_WIDTH)) & SSB_PMU5_PLL_MDIV_MASK;
+
+	tmp = ssb_chipco_pll_read(cc, pll0 + SSB_PMU5_PLL_NM5_OFF);
+	ndiv = SSB_PMU5_PLL_NDIV(tmp);
+
+	fc = ssb_pmu_alp_clock(cc) / 1000000;
+	fc = (p1 * ndiv * fc) / p2;
+
+	ssb_dprintk(KERN_DEBUG PFX
+		    "%s: p1=%d, p2=%d, ndiv=%d(0x%x), m%d=%d,"
+		    " fc=%d, clock=%d\n",
+		    __FUNCTION__, p1, p2, ndiv, ndiv, m, div, fc, fc / div);
+
+	return ((fc / div) * 1000000);
+}
+
+/* query bus clock frequency for PMU-enabled chipcommon */
+u32 ssb_chipco_get_pmuclockcontrol(struct ssb_chipcommon *cc)
+{
+	struct ssb_bus *bus = cc->dev->bus;
+
+	SSB_BUG_ON(!(cc->capabilities & SSB_CHIPCO_CAP_PMU));
+
+	switch (bus->chip_id) {
+	case 0x4328:
+		return ssb_pmu0_clockcpu_r0(cc);
+	case 0x5354:
+		return 120000000;
+	case 0x4319:
+	case 0x4325:
+		return ssb_pmu1_clockcpu_r0(cc);
+	case 4342:
+	case 0x4322:
+	case 43111:
+	case 43112:
+	case 43221:
+	case 43222:
+	case 43224:
+	case 43225:
+	case 43231:
+	case 43421:
+		/* 96MHz backplane clock */
+		return 96000 * 1000;
+	case 0x4716:
+	case 0x4748:
+	case 47162:
+		return ssb_pmu5_clock(cc, SSB_PMU5_MAINPLL_SSB);
+	default:
+		ssb_printk(KERN_WARNING PFX
+			   "No backplane clock specified for %04X device, "
+			   "pmu rev. %d, using default %d Hz\n",
+			   bus->chip_id, cc->pmu.rev, SSB_CHIPCO_PMU_HT_CLOCK);
+	}
+	return SSB_CHIPCO_PMU_HT_CLOCK;
+}
+
+/* query cpu clock frequency for PMU-enabled chipcommon */
+u32 ssb_chipco_get_pmuclockcpu(struct ssb_chipcommon *cc)
+{
+	struct ssb_bus *bus = cc->dev->bus;
+
+	SSB_BUG_ON(!(cc->capabilities & SSB_CHIPCO_CAP_PMU));
+
+	if (bus->chip_id == 0x5354)
+		return 240000000;
+
+	if ((cc->pmu.rev == 5 || cc->pmu.rev == 6 || cc->pmu.rev == 7) &&
+	    (bus->chip_id != 0x4319))
+		return ssb_pmu5_clock(cc, SSB_PMU5_MAINPLL_CPU);
+
+	return ssb_chipco_get_pmuclockcontrol(cc);
+}
+
 /* http://bcm-v4.sipsolutions.net/802.11/SSB/PmuInit */
 void ssb_pmu_init(struct ssb_chipcommon *cc)
 {
--- linux-3.0.4.orig/drivers/ssb/driver_mipscore.c	2011-09-12 14:23:54.000000000 +0300
+++ linux-3.0.4/drivers/ssb/driver_mipscore.c	2011-09-12 14:24:01.000000000 +0300
@@ -317,10 +317,15 @@ u32 ssb_cpu_clock(struct ssb_mipscore *m
 	if (ssb_extif_available(&bus->extif)) {
 		ssb_extif_get_clockcontrol(&bus->extif, &pll_type, &n, &m);
 	} else if (bus->chipco.dev) {
+		if (bus->chipco.capabilities & SSB_CHIPCO_CAP_PMU)
+			return ssb_chipco_get_pmuclockcpu(&bus->chipco);
 		ssb_chipco_get_clockcpu(&bus->chipco, &pll_type, &n, &m);
 	} else
 		return 0;
 
+	/* TODO: remove. g. k. */
+	SSB_BUG_ON(1);
+
 	if ((pll_type == SSB_PLLTYPE_5) || (bus->chip_id == 0x5365)) {
 		rate = 200000000;
 	} else if (bus->chip_id == 0x5354) {
--- linux-3.0.4.orig/drivers/ssb/main.c	2011-09-12 14:23:02.000000000 +0300
+++ linux-3.0.4/drivers/ssb/main.c	2011-09-12 14:24:01.000000000 +0300
@@ -1100,12 +1100,17 @@ u32 ssb_clockspeed(struct ssb_bus *bus)
 	if (ssb_extif_available(&bus->extif))
 		ssb_extif_get_clockcontrol(&bus->extif, &plltype,
 					   &clkctl_n, &clkctl_m);
-	else if (bus->chipco.dev)
+	else if (bus->chipco.dev) {
+		if (bus->chipco.capabilities & SSB_CHIPCO_CAP_PMU)
+			return ssb_chipco_get_pmuclockcontrol(&bus->chipco);
 		ssb_chipco_get_clockcontrol(&bus->chipco, &plltype,
 					    &clkctl_n, &clkctl_m);
-	else
+	} else
 		return 0;
 
+	/* TODO: remove. g. k. */
+	SSB_BUG_ON(1);
+
 	if (bus->chip_id == 0x5365) {
 		rate = 100000000;
 	} else if (bus->chip_id == 0x5354) {
--- linux-3.0.4.orig/drivers/ssb/ssb_private.h	2011-09-12 14:23:02.000000000 +0300
+++ linux-3.0.4/drivers/ssb/ssb_private.h	2011-09-12 14:24:01.000000000 +0300
@@ -211,6 +211,10 @@ static inline void b43_pci_ssb_bridge_ex
 }
 #endif /* CONFIG_SSB_B43_PCI_BRIDGE */
 
+/* driver_chipcommon_pmu.c */
+extern u32 ssb_chipco_get_pmuclockcontrol(struct ssb_chipcommon *cc);
+extern u32 ssb_chipco_get_pmuclockcpu(struct ssb_chipcommon *cc);
+
 /* device mmio access helpers */
 extern u8 ssb_ssb_read8(struct ssb_device *dev, u16 offset);
 extern u16 ssb_ssb_read16(struct ssb_device *dev, u16 offset);
--- linux-3.0.4.orig/include/linux/ssb/ssb_driver_chipcommon.h	2011-09-12 14:23:02.000000000 +0300
+++ linux-3.0.4/include/linux/ssb/ssb_driver_chipcommon.h	2011-09-12 14:24:01.000000000 +0300
@@ -233,6 +233,8 @@
 #define  SSB_CHIPCO_PMU_CTL_LPOSEL		0x00000001 /* LPO sel */
 #define SSB_CHIPCO_PMU_CAP			0x0604 /* PMU capabilities */
 #define  SSB_CHIPCO_PMU_CAP_REVISION		0x000000FF /* Revision mask */
+#define  SSB_CHIPCO_PMU_CAP_RESCNT_MASK		0x00001F00 /* Resource count mask */
+#define  SSB_CHIPCO_PMU_CAP_RESCNT_SHIFT	8 /* Resource count shift */
 #define SSB_CHIPCO_PMU_STAT			0x0608 /* PMU status */
 #define  SSB_CHIPCO_PMU_STAT_INTPEND		0x00000040 /* Interrupt pending */
 #define  SSB_CHIPCO_PMU_STAT_SBCLKST		0x00000030 /* Backplane clock status? */
@@ -313,6 +315,49 @@
 #define  SSB_PMU1_PLLCTL5_CLKDRV		0xFFFFFF00 /* clk drv */
 #define  SSB_PMU1_PLLCTL5_CLKDRV_SHIFT		8
 
+/* Divider allocation in 4716/47162/5356 */
+#define SSB_PMU5_MAINPLL_CPU			1
+#define SSB_PMU5_MAINPLL_MEM			2
+#define SSB_PMU5_MAINPLL_SSB			3
+
+/* PLL usage in 4716/47162 */
+#define SSB_PMU4716_MAINPLL_PLL0		12
+
+/* ALP clock on pre-PMU chips */
+#define SSB_CHIPCO_PMU_ALP_CLOCK		20000000
+/* HT clock for systems with PMU-enabled chipcommon */
+#define SSB_CHIPCO_PMU_HT_CLOCK			80000000
+
+/* PMU rev. 5 and rev. 6 */
+#define SSB_PMU5_PLL_P1P2_OFF			0
+#define  SSB_PMU5_PLL_P1_MASK			0x0F000000
+#define  SSB_PMU5_PLL_P1_SHIFT			24
+#define  SSB_PMU5_PLL_P2_MASK			0x00F00000
+#define  SSB_PMU5_PLL_P2_SHIFT			20
+#define SSB_PMU5_PLL_M14_OFF			1
+#define  SSB_PMU5_PLL_MDIV_MASK			0x000000FF
+#define  SSB_PMU5_PLL_MDIV_WIDTH		8
+#define SSB_PMU5_PLL_NM5_OFF			2
+#define  SSB_PMU5_PLL_NDIV_MASK			0xFFF00000
+#define  SSB_PMU5_PLL_NDIV_SHIFT		20
+#define SSB_PMU5_PLL_FMAB_OFF			3
+#define  SSB_PMU5_PLL_MRAT_MASK			0xF0000000
+#define  SSB_PMU5_PLL_MRAT_SHIFT		28
+#define  SSB_PMU5_PLL_ABRAT_MASK		0x08000000
+#define  SSB_PMU5_PLL_ABRAT_SHIFT		27
+#define  SSB_PMU5_PLL_FDIV_MASK			0x07FFFFFF
+#define SSB_PMU5_PLL_PLLCTL_OFF			4
+#define SSB_PMU5_PLL_PCHI_OFF			5
+#define  SSB_PMU5_PLL_PCHI_MASK			0x0000003F
+
+/* PMU rev. 5 and rev. 6 macro helpers */
+#define SSB_PMU5_PLL_P1(p) (((p) & SSB_PMU5_PLL_P1_MASK) >> \
+			    SSB_PMU5_PLL_P1_SHIFT)
+#define SSB_PMU5_PLL_P2(p) (((p) & SSB_PMU5_PLL_P2_MASK) >> \
+			    SSB_PMU5_PLL_P2_SHIFT)
+#define SSB_PMU5_PLL_NDIV(n) (((n) & SSB_PMU5_PLL_NDIV_MASK) >> \
+			      SSB_PMU5_PLL_NDIV_SHIFT)
+
 /* BCM4312 PLL resource numbers. */
 #define SSB_PMURES_4312_SWITCHER_BURST		0
 #define SSB_PMURES_4312_SWITCHER_PWM    	1
