From: George Kashperko <george@znau.edu.ua>

Introduce handlers for SB core control and state flags' management. SB-style
buses provide access to these flags at two high octets of TMSLOW and TMSHIGH
registers whereas AI-ones implement these flags in two low octets of IOCTRL
and IOSTAT registers.
Signed-off-by: George Kashperko <george@znau.edu.ua>
---
 drivers/ssb/main.c      |   23 +++++++++++++++++++++++
 include/linux/ssb/ssb.h |   10 ++++++++++
 2 files changed, 33 insertions(+)
--- linux-3.0.1.orig/drivers/ssb/main.c	2011-08-08 15:28:34.000000000 +0300
+++ linux-3.0.1/drivers/ssb/main.c	2011-08-08 15:30:27.000000000 +0300
@@ -1404,6 +1404,27 @@ static u32 ssb_admatch_size_sb(struct ss
 	return size;
 }
 
+static u32 ssb_core_ctl_flags_sb(struct ssb_device *dev, u32 mask, u32 val)
+{
+	u32 tmp;
+
+	if (~mask || val) {
+		tmp = (ssb_read32(dev, SSB_TMSLOW) & mask) | val;
+		ssb_write32(dev, SSB_TMSLOW, tmp);
+	}
+
+	/* readback */
+	tmp = ssb_read32(dev, SSB_TMSLOW);
+	udelay(1);
+
+	return tmp;
+}
+
+static u32 ssb_core_state_flags_sb(struct ssb_device *dev)
+{
+	return ssb_read32(dev, SSB_TMSHIGH);
+}
+
 /* Ops for the plain SSB bus without a host-device (no PCI or PCMCIA). */
 static const struct ssb_bus_ops ssb_ssb_ops = {
 	.read8			= ssb_ssb_read8,
@@ -1421,6 +1442,8 @@ static const struct ssb_bus_ops ssb_ssb_
 	.device_disable		= ssb_device_disable_sb,
 	.admatch_base		= ssb_admatch_base_sb,
 	.admatch_size		= ssb_admatch_size_sb,
+	.core_ctl_flags		= ssb_core_ctl_flags_sb,
+	.core_state_flags	= ssb_core_state_flags_sb,
 };
 
 static int __init ssb_modinit(void)
--- linux-3.0.1.orig/include/linux/ssb/ssb.h	2011-08-08 15:28:34.000000000 +0300
+++ linux-3.0.1/include/linux/ssb/ssb.h	2011-08-08 15:30:27.000000000 +0300
@@ -126,6 +126,8 @@ struct ssb_bus_ops {
 	void (*device_disable)(struct ssb_device *dev, u32 core_specific_flags);
 	u32 (*admatch_base)(struct ssb_device *dev, u32 adm);
 	u32 (*admatch_size)(struct ssb_device *dev, u32 adm);
+	u32 (*core_ctl_flags)(struct ssb_device *dev, u32 mask, u32 val);
+	u32 (*core_state_flags)(struct ssb_device *dev);
 };
 
 
@@ -489,6 +491,14 @@ static inline u32 ssb_admatch_size(struc
 {
 	return dev->ops->admatch_size(dev, adm);
 }
+static inline u32 ssb_core_ctl_flags(struct ssb_device *dev, u32 mask, u32 val)
+{
+	return dev->ops->core_ctl_flags(dev, mask, val);
+}
+static inline u32 ssb_core_state_flags(struct ssb_device *dev)
+{
+	return dev->ops->core_state_flags(dev);
+}
 
 
 /* The SSB DMA API. Use this API for any DMA operation on the device.
