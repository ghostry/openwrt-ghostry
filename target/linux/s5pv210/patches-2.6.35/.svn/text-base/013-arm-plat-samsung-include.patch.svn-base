--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/adc.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/adc.h	2011-08-08 12:52:05.000000000 +0800
@@ -16,6 +16,18 @@
 
 struct s3c_adc_client;
 
+enum s3c_cpu_type {
+	TYPE_S3C24XX,
+	TYPE_S3C64XX
+};
+
+struct s3c_adc_mach_info {
+	/* if you need to use some platform data, add in here*/
+	int delay;
+	int presc;
+	int resolution;
+};
+
 extern int s3c_adc_start(struct s3c_adc_client *client,
 			 unsigned int channel, unsigned int nr_samples);
 
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/clock.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/clock.h	2011-08-08 12:52:05.000000000 +0800
@@ -46,6 +46,7 @@
 	unsigned long         ctrlbit;
 
 	struct clk_ops		*ops;
+	struct device		*dev;
 	int		    (*enable)(struct clk *, int enable);
 };
 
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/cpu-freq.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/cpu-freq.h	2011-08-08 12:52:05.000000000 +0800
@@ -38,6 +38,12 @@
 	unsigned long	hclk_tns;	/* in 10ths of ns */
 	unsigned long	hclk;
 	unsigned long	pclk;
+#ifdef CONFIG_ARCH_S5PV210
+	unsigned long	hclk_msys;
+	unsigned long	pclk_msys;
+	unsigned long	hclk_dsys;
+	unsigned long	pclk_dsys;
+#endif
 };
 
 /**
@@ -61,8 +67,7 @@
  */
 struct s3c_cpufreq_freqs {
 	struct cpufreq_freqs	freqs;
-	struct s3c_freq		old;
-	struct s3c_freq		new;
+	const struct s3c_freq		*old;
 
 	unsigned int		pll_changing:1;
 };
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/cpu.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/cpu.h	2011-08-08 12:52:05.000000000 +0800
@@ -66,7 +66,11 @@
 /* timer for 2410/2440 */
 
 struct sys_timer;
+#if	defined(CONFIG_S5P_HIGH_RES_TIMERS)
+extern struct sys_timer s5p_systimer;
+#else
 extern struct sys_timer s3c24xx_timer;
+#endif
 
 /* system device classes */
 
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/devs.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/devs.h	2011-08-08 12:52:05.000000000 +0800
@@ -23,6 +23,16 @@
 extern struct platform_device *s3c24xx_uart_devs[];
 extern struct platform_device *s3c24xx_uart_src[];
 
+extern struct platform_device s3c24xx_uart_device0;
+extern struct platform_device s3c24xx_uart_device1;
+extern struct platform_device s3c24xx_uart_device2;
+extern struct platform_device s3c24xx_uart_device3;
+
+extern struct platform_device s5pv210_device_fiqdbg_uart0;
+extern struct platform_device s5pv210_device_fiqdbg_uart1;
+extern struct platform_device s5pv210_device_fiqdbg_uart2;
+extern struct platform_device s5pv210_device_fiqdbg_uart3;
+
 extern struct platform_device s3c_device_timer[];
 
 extern struct platform_device s3c64xx_device_iis0;
@@ -40,6 +50,17 @@
 extern struct platform_device s3c_device_ts;
 
 extern struct platform_device s3c_device_fb;
+
+extern struct platform_device s3c_device_fimc0;
+extern struct platform_device s3c_device_fimc1;
+extern struct platform_device s3c_device_fimc2;
+extern struct platform_device s3c_device_csis;
+extern struct platform_device s3c_device_ipc;
+extern struct platform_device s3c_device_mfc;
+extern struct platform_device s3c_device_jpeg;
+extern struct platform_device s3c_device_g3d;
+extern struct platform_device s3c_device_g2d;
+
 extern struct platform_device s3c_device_ohci;
 extern struct platform_device s3c_device_lcd;
 extern struct platform_device s3c_device_wdt;
@@ -54,9 +75,11 @@
 extern struct platform_device s3c_device_hsmmc0;
 extern struct platform_device s3c_device_hsmmc1;
 extern struct platform_device s3c_device_hsmmc2;
+extern struct platform_device s3c_device_hsmmc3;
 
 extern struct platform_device s3c_device_spi0;
 extern struct platform_device s3c_device_spi1;
+extern struct platform_device s5p_device_dm9000;
 
 extern struct platform_device s5pc100_device_spi0;
 extern struct platform_device s5pc100_device_spi1;
@@ -67,6 +90,7 @@
 extern struct platform_device s5p6440_device_spi1;
 
 extern struct platform_device s3c_device_hwmon;
+extern struct platform_device s3c_device_keypad;
 
 extern struct platform_device s3c_device_nand;
 extern struct platform_device s3c_device_onenand;
@@ -74,8 +98,18 @@
 extern struct platform_device s5pc110_device_onenand;
 
 extern struct platform_device s3c_device_usbgadget;
+extern struct platform_device s3c_device_android_usb;
+extern struct platform_device s3c_device_usb_mass_storage;
+extern struct platform_device s3c_device_rndis;
 extern struct platform_device s3c_device_usb_hsotg;
 
+extern struct platform_device s5p_device_rotator;
+extern struct platform_device s5p_device_tvout;
+extern struct platform_device s5p_device_cec;
+extern struct platform_device s5p_device_hpd;
+extern struct platform_device s5p_device_g3d;
+
+extern struct platform_device s5pv210_device_spdif;
 extern struct platform_device s5pv210_device_ac97;
 extern struct platform_device s5pv210_device_pcm0;
 extern struct platform_device s5pv210_device_pcm1;
@@ -99,12 +133,23 @@
 extern struct platform_device s5pc100_device_iis0;
 extern struct platform_device s5pc100_device_iis1;
 extern struct platform_device s5pc100_device_iis2;
+extern struct platform_device s5p_device_rtc;
 
+extern struct platform_device s3c_device_usb_ehci;
+extern struct platform_device s3c_device_usb_ohci;
+
+extern struct platform_device s3c_device_adc;
 /* s3c2440 specific devices */
 
+extern struct platform_device s5pv210_device_pdma0;
+extern struct platform_device s5pv210_device_pdma1;
+extern struct platform_device s5pv210_device_mdma;
+
 #ifdef CONFIG_CPU_S3C2440
 
 extern struct platform_device s3c_device_camif;
 extern struct platform_device s3c_device_ac97;
 
 #endif
+
+void __init s3c_usb_set_serial(void);
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/dma.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/dma.h	2011-08-09 11:11:50.000000000 +0800
@@ -18,7 +18,10 @@
 
 enum s3c2410_dmasrc {
 	S3C2410_DMASRC_HW,		/* source is memory */
-	S3C2410_DMASRC_MEM		/* source is hardware */
+	S3C2410_DMASRC_MEM,		/* source is hardware */
+	S3C_DMA_MEM2MEM,
+	S3C_DMA_MEM2MEM_SET,
+	S3C_DMA_MEM2MEM_NOBARRIER,
 };
 
 /* enum s3c2410_chan_op
@@ -53,7 +56,7 @@
 				   enum s3c2410_dma_buffresult result);
 
 typedef int  (*s3c2410_dma_opfn_t)(struct s3c2410_dma_chan *,
-				   enum s3c2410_chan_op );
+				   enum s3c2410_chan_op);
 
 
 
@@ -98,6 +101,9 @@
 extern int s3c2410_dma_enqueue(unsigned int channel, void *id,
 			       dma_addr_t data, int size);
 
+extern int s3c2410_dma_enqueue_autoload(unsigned int channel, void *id,
+			       dma_addr_t data, int size, int num);
+
 /* s3c2410_dma_config
  *
  * configure the dma channel
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/gpio-cfg-helpers.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/gpio-cfg-helpers.h	2011-08-08 12:52:05.000000000 +0800
@@ -42,6 +42,11 @@
 	return (chip->config->set_pull)(chip, off, pull);
 }
 
+static inline int s3c_gpio_do_setpin(struct s3c_gpio_chip *chip,
+				      unsigned int off, s3c_gpio_pull_t level)
+{
+	return (chip->config->set_pin)(chip, off, level);
+}
 /**
  * s3c_gpio_setcfg_s3c24xx - S3C24XX style GPIO configuration.
  * @chip: The gpio chip that is being configured.
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/gpio-cfg.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/gpio-cfg.h	2011-08-08 12:52:05.000000000 +0800
@@ -56,11 +56,16 @@
 	int		(*set_pull)(struct s3c_gpio_chip *chip, unsigned offs,
 				    s3c_gpio_pull_t pull);
 
+	int		(*set_pin)(struct s3c_gpio_chip *chip, unsigned offs,
+				    s3c_gpio_pull_t level);
+
 	unsigned (*get_config)(struct s3c_gpio_chip *chip, unsigned offs);
 	int	 (*set_config)(struct s3c_gpio_chip *chip, unsigned offs,
 			       unsigned config);
 };
 
+extern int		s3c_gpio_setpin(unsigned int pin, s3c_gpio_pull_t level);
+
 #define S3C_GPIO_SPECIAL_MARK	(0xfffffff0)
 #define S3C_GPIO_SPECIAL(x)	(S3C_GPIO_SPECIAL_MARK | (x))
 
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/gpio-core.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/gpio-core.h	2011-08-08 12:52:05.000000000 +0800
@@ -63,9 +63,10 @@
 	struct s3c_gpio_cfg	*config;
 	struct s3c_gpio_pm	*pm;
 	void __iomem		*base;
+	int			eint_offset;
 	spinlock_t		 lock;
 #ifdef CONFIG_PM
-	u32			pm_save[4];
+	u32			pm_save[7];
 #endif
 };
 
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/iic.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/iic.h	2011-08-08 12:52:05.000000000 +0800
@@ -61,4 +61,8 @@
 extern void s3c_i2c1_cfg_gpio(struct platform_device *dev);
 extern void s3c_i2c2_cfg_gpio(struct platform_device *dev);
 
+extern void s3c_i2c0_force_stop(void);
+extern void s3c_i2c1_force_stop(void);
+extern void s3c_i2c2_force_stop(void);
+
 #endif /* __ASM_ARCH_IIC_H */
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/map-base.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/map-base.h	2011-08-08 12:52:05.000000000 +0800
@@ -22,7 +22,7 @@
  * an single MOVS instruction (ie, only 8 bits of set data)
  */
 
-#define S3C_ADDR_BASE	(0xF4000000)
+#define S3C_ADDR_BASE	(0xFD000000)
 
 #ifndef __ASSEMBLY__
 #define S3C_ADDR(x)	((void __iomem __force *)S3C_ADDR_BASE + (x))
@@ -35,6 +35,8 @@
 #define S3C_VA_MEM	S3C_ADDR(0x00200000)	/* memory control */
 #define S3C_VA_TIMER	S3C_ADDR(0x00300000)	/* timer block */
 #define S3C_VA_WATCHDOG	S3C_ADDR(0x00400000)	/* watchdog */
+#define S3C_VA_OTG	S3C_ADDR(0x00E00000)	/* OTG */
+#define S3C_VA_OTGSFR	S3C_ADDR(0x00F00000)	/* OTG PHY */
 #define S3C_VA_UART	S3C_ADDR(0x01000000)	/* UART */
 
 /* This is used for the CPU specific mappings that may be needed, so that
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/nand.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/nand.h	2011-08-08 12:52:05.000000000 +0800
@@ -65,3 +65,9 @@
  * it with the s3c_device_nand. This allows @nand to be __initdata.
 */
 extern void s3c_nand_set_platdata(struct s3c2410_platform_nand *nand);
+
+struct s3c_nand_mtd_info {
+	uint chip_nr;
+	uint mtd_part_nr;
+	struct mtd_partition *partition;
+};
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/pm.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/pm.h	2011-08-08 12:52:05.000000000 +0800
@@ -15,7 +15,7 @@
  * management
 */
 
-#ifdef CONFIG_PM
+#if defined(CONFIG_PM)
 
 extern __init int s3c_pm_init(void);
 
@@ -39,6 +39,7 @@
 
 extern void (*pm_cpu_prep)(void);
 extern void (*pm_cpu_sleep)(void);
+extern void (*pm_cpu_restore)(void);
 
 /* Flags for PM Control */
 
@@ -100,6 +101,7 @@
 extern void s3c_pm_do_restore_core(struct sleep_save *ptr, int count);
 
 #ifdef CONFIG_PM
+struct sys_device;
 extern int s3c_irqext_wake(unsigned int irqno, unsigned int state);
 extern int s3c24xx_irq_suspend(struct sys_device *dev, pm_message_t state);
 extern int s3c24xx_irq_resume(struct sys_device *dev);
@@ -124,7 +126,7 @@
 
 #define S3C_PMDBG(fmt...) s3c_pm_dbg(fmt)
 #else
-#define S3C_PMDBG(fmt...) printk(KERN_DEBUG fmt)
+#define S3C_PMDBG(fmt...) pr_debug(fmt)
 #endif
 
 #ifdef CONFIG_S3C_PM_DEBUG_LED_SMDK
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/regs-adc.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/regs-adc.h	2011-08-08 12:52:05.000000000 +0800
@@ -59,6 +59,9 @@
 #define S3C2410_ADCDAT1_XY_PST		(0x3<<12)
 #define S3C2410_ADCDAT1_YPDATA_MASK	(0x03FF)
 
+#define S3C_ADCREG(x) 			(x)
+#define S3C_ADCMUX			S3C_ADCREG(0x1C)
+#define S3C_ADCCON_SELMUX_1(x)		(((x)&0xF)<<0)
 #endif /* __ASM_ARCH_REGS_ADC_H */
 
 
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/regs-rtc.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/regs-rtc.h	2011-08-08 12:52:05.000000000 +0800
@@ -25,6 +25,22 @@
 #define S3C64XX_RTCCON_TICMSK (0xF<<7)
 #define S3C64XX_RTCCON_TICSHT (7)
 
+#if defined(CONFIG_CPU_S5PC100) || defined(CONFIG_CPU_S5PV210)
+#define S3C_MAX_CNT     32768
+#define S3C_RTCCON_TICEN        (1<<8)
+#define S3C_RTC_TICNT   S3C2410_RTCREG(0x40)
+#else
+#define S3C_INTP_ALM    (1<<1)
+#define S3C_MAX_CNT     128
+#define S3C_RTCCON_TICEN  (1<<7)
+#define S3C_RTC_TICNT   S3C2410_RTCREG(0x44)
+#endif
+
+/* Common Reg for samsung AP*/
+#define S3C_INTP        S3C2410_RTCREG(0x30)
+#define S3C_INTP_ALM    (1<<1)
+#define S3C_INTP_TIC    (1<<0)
+
 #define S3C2410_TICNT	      S3C2410_RTCREG(0x44)
 #define S3C2410_TICNT_ENABLE  (1<<7)
 
@@ -60,6 +76,6 @@
 #define S3C2410_RTCDAY	      S3C2410_RTCREG(0x80)
 #define S3C2410_RTCMON	      S3C2410_RTCREG(0x84)
 #define S3C2410_RTCYEAR	      S3C2410_RTCREG(0x88)
-
+#define S3C2410_CURTICCNT     S3C2410_RTCREG(0x90)
 
 #endif /* __ASM_ARCH_REGS_RTC_H */
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/regs-sdhci.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/regs-sdhci.h	2011-08-08 12:52:05.000000000 +0800
@@ -83,5 +83,5 @@
 #define S3C64XX_SDHCI_CONTROL4_DRIVE_9mA	(0x3 << 16)
 
 #define S3C64XX_SDHCI_CONTROL4_BUSY		(1)
-
+#define SDHCI_S3C_CTRL_8BITBUS                  (1 << 5)
 #endif /* __PLAT_S3C_SDHCI_REGS_H */
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/regs-serial.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/regs-serial.h	2011-08-08 12:52:05.000000000 +0800
@@ -53,6 +53,9 @@
 #define S3C2410_UERSTAT	  (0x14)
 #define S3C2410_UFSTAT	  (0x18)
 #define S3C2410_UMSTAT	  (0x1C)
+#define S3C2410_UBRDIV	  (0x28)
+#define S3C2410_UDIVSLOT  (0x2C)
+#define S3C2410_UINTMSK   (0x38)
 
 #define S3C2410_LCON_CFGMASK	  ((0xF<<3)|(0x3))
 
@@ -194,6 +197,11 @@
 #define S3C64XX_UINTSP		0x34
 #define S3C64XX_UINTM		0x38
 
+/* S5V210 interrupt registers. */
+#define S5P_UINTP		0x30
+#define S5P_UINTSP		0x34
+#define S5P_UINTM		0x38
+
 /* Following are specific to S5PV210 and S5P6442 */
 #define S5PV210_UCON_CLKMASK	(1<<10)
 #define S5PV210_UCON_PCLK	(0<<10)
@@ -252,12 +260,17 @@
  * the pointer is setup by the machine specific initialisation from the
  * arch/arm/mach-s3c2410/ directory.
 */
+struct uart_port;
 
 struct s3c2410_uartcfg {
 	unsigned char	   hwport;	 /* hardware port number */
 	unsigned char	   unused;
 	unsigned short	   flags;
+#if !defined(CONFIG_CPU_S5PV210)
 	upf_t		   uart_flags;	 /* default uart flags */
+#else
+        unsigned long	   uart_flags;      /* default uart flags */
+#endif
 
 	unsigned long	   ucon;	 /* value of ucon for port */
 	unsigned long	   ulcon;	 /* value of ulcon for port */
@@ -265,6 +278,8 @@
 
 	struct s3c24xx_uart_clksrc *clocks;
 	unsigned int		    clocks_size;
+
+	void (*wake_peer)(struct uart_port *);
 };
 
 /* s3c24xx_uart_devs
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/s3c-dma-pl330.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/s3c-dma-pl330.h	2011-08-08 12:52:05.000000000 +0800
@@ -32,6 +32,12 @@
 	DMACH_UART2_TX,
 	DMACH_UART3_RX,
 	DMACH_UART3_TX,
+	DMACH_UART4_RX,
+	DMACH_UART4_TX,
+	DMACH_UART5_RX,
+	DMACH_UART5_TX,
+	DMACH_USI_RX,
+	DMACH_USI_TX,
 	DMACH_IRDA,
 	DMACH_I2S0_RX,
 	DMACH_I2S0_TX,
@@ -64,6 +70,28 @@
 	DMACH_MSM_REQ2,
 	DMACH_MSM_REQ1,
 	DMACH_MSM_REQ0,
+	DMACH_SLIMBUS0_RX,
+	DMACH_SLIMBUS0_TX,
+	DMACH_SLIMBUS0AUX_RX,
+	DMACH_SLIMBUS0AUX_TX,
+	DMACH_SLIMBUS1_RX,
+	DMACH_SLIMBUS1_TX,
+	DMACH_SLIMBUS2_RX,
+	DMACH_SLIMBUS2_TX,
+	DMACH_SLIMBUS3_RX,
+	DMACH_SLIMBUS3_TX,
+	DMACH_SLIMBUS4_RX,
+	DMACH_SLIMBUS4_TX,
+	DMACH_SLIMBUS5_RX,
+	DMACH_SLIMBUS5_TX,
+	DMACH_MTOM_0,
+	DMACH_MTOM_1,
+	DMACH_MTOM_2,
+	DMACH_MTOM_3,
+	DMACH_MTOM_4,
+	DMACH_MTOM_5,
+	DMACH_MTOM_6,
+	DMACH_MTOM_7,
 	/* END Marker, also used to denote a reserved channel */
 	DMACH_MAX,
 };
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/sdhci.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/sdhci.h	2011-08-17 19:24:52.000000000 +0800
@@ -20,10 +20,19 @@
 struct mmc_card;
 struct mmc_ios;
 
+enum cd_types {
+	S3C_SDHCI_CD_INTERNAL,	/* use mmc internal CD line */
+	S3C_SDHCI_CD_EXTERNAL,	/* use external callback */
+	S3C_SDHCI_CD_GPIO,		/* use external gpio pin for CD line */
+	S3C_SDHCI_CD_NONE,		/* no CD line, use polling to detect card */
+	S3C_SDHCI_CD_PERMANENT,	/* no CD line, card permanently wired to host */
+};
+
 /**
  * struct s3c_sdhci_platdata() - Platform device data for Samsung SDHCI
  * @max_width: The maximum number of data bits supported.
  * @host_caps: Standard MMC host capabilities bit field.
+ * @cd_type: Type of Card Detection method (see cd_types enum above)
  * @cfg_gpio: Configure the GPIO for a specific card bit-width
  * @cfg_card: Configure the interface for a specific card and speed. This
  *            is necessary the controllers and/or GPIO blocks require the
@@ -37,6 +46,7 @@
 struct s3c_sdhci_platdata {
 	unsigned int	max_width;
 	unsigned int	host_caps;
+	enum cd_types	cd_type;
 
 	char		**clocks;	/* set of clock sources */
 
@@ -45,6 +55,21 @@
 			    void __iomem *regbase,
 			    struct mmc_ios *ios,
 			    struct mmc_card *card);
+	void	(*adjust_cfg_card)(struct s3c_sdhci_platdata *pdata, void __iomem *regbase, int rw);
+	int		rx_cfg;
+	int		tx_cfg;
+
+	/* add to deal with EXT_IRQ as a card detect pin */
+	void            (*cfg_ext_cd) (void);
+	unsigned int    (*detect_ext_cd) (void);
+	unsigned int    ext_cd;
+
+	/* add to deal with GPIO as a card write protection pin */
+	void            (*cfg_wp) (void);
+	int             (*get_ro) (struct mmc_host *mmc);
+
+	/* add to deal with non-removable device */
+	int     built_in;
 };
 
 /**
@@ -55,9 +80,11 @@
  * The call will copy the platform data, so the board definitions can
  * make the structure itself __initdata.
  */
+extern void s3c_sdhci_set_platdata(void);
 extern void s3c_sdhci0_set_platdata(struct s3c_sdhci_platdata *pd);
 extern void s3c_sdhci1_set_platdata(struct s3c_sdhci_platdata *pd);
 extern void s3c_sdhci2_set_platdata(struct s3c_sdhci_platdata *pd);
+extern void s3c_sdhci3_set_platdata(struct s3c_sdhci_platdata *pd);
 
 /* Default platform data, exported so that per-cpu initialisation can
  * set the correct one when there are more than one cpu type selected.
@@ -66,6 +93,7 @@
 extern struct s3c_sdhci_platdata s3c_hsmmc0_def_platdata;
 extern struct s3c_sdhci_platdata s3c_hsmmc1_def_platdata;
 extern struct s3c_sdhci_platdata s3c_hsmmc2_def_platdata;
+extern struct s3c_sdhci_platdata s3c_hsmmc3_def_platdata;
 
 /* Helper function availablity */
 
@@ -78,6 +106,7 @@
 extern void s5pv210_setup_sdhci0_cfg_gpio(struct platform_device *, int w);
 extern void s5pv210_setup_sdhci1_cfg_gpio(struct platform_device *, int w);
 extern void s5pv210_setup_sdhci2_cfg_gpio(struct platform_device *, int w);
+extern void s5pv210_setup_sdhci3_cfg_gpio(struct platform_device *, int w);
 
 /* S3C6400 SDHCI setup */
 
@@ -229,9 +258,10 @@
 extern char *s5pv210_hsmmc_clksrcs[4];
 
 extern void s5pv210_setup_sdhci_cfg_card(struct platform_device *dev,
-					   void __iomem *r,
-					   struct mmc_ios *ios,
-					   struct mmc_card *card);
+					 void __iomem *r,
+					 struct mmc_ios *ios,
+					 struct mmc_card *card);
+extern void s5pv210_adjust_sdhci_cfg_card(struct s3c_sdhci_platdata *pdata, void __iomem *r, int rw);
 
 #ifdef CONFIG_S3C_DEV_HSMMC
 static inline void s5pv210_default_sdhci0(void)
@@ -239,6 +269,7 @@
 	s3c_hsmmc0_def_platdata.clocks = s5pv210_hsmmc_clksrcs;
 	s3c_hsmmc0_def_platdata.cfg_gpio = s5pv210_setup_sdhci0_cfg_gpio;
 	s3c_hsmmc0_def_platdata.cfg_card = s5pv210_setup_sdhci_cfg_card;
+	s3c_hsmmc0_def_platdata.adjust_cfg_card = s5pv210_adjust_sdhci_cfg_card;
 }
 #else
 static inline void s5pv210_default_sdhci0(void) { }
@@ -250,6 +281,7 @@
 	s3c_hsmmc1_def_platdata.clocks = s5pv210_hsmmc_clksrcs;
 	s3c_hsmmc1_def_platdata.cfg_gpio = s5pv210_setup_sdhci1_cfg_gpio;
 	s3c_hsmmc1_def_platdata.cfg_card = s5pv210_setup_sdhci_cfg_card;
+	s3c_hsmmc1_def_platdata.adjust_cfg_card = s5pv210_adjust_sdhci_cfg_card;
 }
 #else
 static inline void s5pv210_default_sdhci1(void) { }
@@ -261,18 +293,31 @@
 	s3c_hsmmc2_def_platdata.clocks = s5pv210_hsmmc_clksrcs;
 	s3c_hsmmc2_def_platdata.cfg_gpio = s5pv210_setup_sdhci2_cfg_gpio;
 	s3c_hsmmc2_def_platdata.cfg_card = s5pv210_setup_sdhci_cfg_card;
+	s3c_hsmmc2_def_platdata.adjust_cfg_card = s5pv210_adjust_sdhci_cfg_card;
 }
 #else
 static inline void s5pv210_default_sdhci2(void) { }
 #endif /* CONFIG_S3C_DEV_HSMMC2 */
 
+#ifdef CONFIG_S3C_DEV_HSMMC3
+static inline void s5pv210_default_sdhci3(void)
+{
+	s3c_hsmmc3_def_platdata.clocks = s5pv210_hsmmc_clksrcs;
+	s3c_hsmmc3_def_platdata.cfg_gpio = s5pv210_setup_sdhci3_cfg_gpio;
+	s3c_hsmmc3_def_platdata.cfg_card = s5pv210_setup_sdhci_cfg_card;
+	s3c_hsmmc3_def_platdata.adjust_cfg_card = s5pv210_adjust_sdhci_cfg_card;
+}
+#else
+static inline void s5pv210_default_sdhci3(void) { }
+#endif /* CONFIG_S3C_DEV_HSMMC2 */
+
 #else
 static inline void s5pv210_default_sdhci0(void) { }
 static inline void s5pv210_default_sdhci1(void) { }
 static inline void s5pv210_default_sdhci2(void) { }
-#endif /* CONFIG_S5PC100_SETUP_SDHCI */
-
-
+static inline void s5pv210_default_sdhci3(void) { }
+#endif /* CONFIG_S5PV210_SETUP_SDHCI */
 
+extern void sdhci_s3c_force_presence_change(struct platform_device *pdev);
 
 #endif /* __PLAT_S3C_SDHCI_H */
--- linux-2.6.35.7/arch/arm/plat-samsung/include/plat/watchdog-reset.h	2010-09-29 09:09:08.000000000 +0800
+++ tiny210/arch/arm/plat-samsung/include/plat/watchdog-reset.h	2011-08-08 12:52:05.000000000 +0800
@@ -19,18 +19,10 @@
 
 static inline void arch_wdt_reset(void)
 {
-	struct clk *wdtclk;
-
 	printk("arch_reset: attempting watchdog reset\n");
 
 	__raw_writel(0, S3C2410_WTCON);	  /* disable watchdog, to be safe  */
 
-	wdtclk = clk_get(NULL, "watchdog");
-	if (!IS_ERR(wdtclk)) {
-		clk_enable(wdtclk);
-	} else
-		printk(KERN_WARNING "%s: warning: cannot get watchdog clock\n", __func__);
-
 	/* put initial values into count and data */
 	__raw_writel(0x80, S3C2410_WTCNT);
 	__raw_writel(0x80, S3C2410_WTDAT);
