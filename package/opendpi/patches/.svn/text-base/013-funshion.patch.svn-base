--- /dev/null	
+++ b/src/lib/protocols/funshion.c	
@@ -0,0 +1,128 @@
+/*
+ * funshion.c
+ * Copyright (C) 2009-2011 by ipoque GmbH
+ * 
+ * This file is part of OpenDPI, an open source deep packet inspection
+ * library based on the PACE technology by ipoque GmbH
+ * 
+ * OpenDPI is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * OpenDPI is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with OpenDPI.  If not, see <http://www.gnu.org/licenses/>.
+ * 
+ */
+
+
+#include "ipq_protocols.h"
+#ifdef IPOQUE_PROTOCOL_FUNSHION
+/*static inline u8 ipoque_is_valid_funshion_ft_packet(const struct ipoque_packet_struct *packet)
+{
+
+
+｝
+*/
+
+static void ipoque_int_funshion_add_connection(struct ipoque_detection_module_struct
+											   *ipoque_struct)
+{
+	ipoque_int_add_connection(ipoque_struct, IPOQUE_PROTOCOL_FUNSHION, IPOQUE_REAL_PROTOCOL);
+}
+
+void ipoque_int_search_funshion_udp(struct ipoque_detection_module_struct
+							*ipoque_struct)
+{
+	struct ipoque_packet_struct *packet = &ipoque_struct->packet;
+	struct ipoque_flow_struct *flow = ipoque_struct->flow;
+	// struct ipoque_id_struct *src=ipoque_struct->src;
+	// struct ipoque_id_struct *dst=ipoque_struct->dst;
+
+	if (ntohs(packet->udp->dest) == 9900 && packet->payload_packet_len >= 17 && memcmp(&packet->payload[packet->payload_packet_len - 17], "keep alive packet", 17) == 0){
+
+		IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "FUNSHION udp detected\n");
+		ipoque_int_funshion_add_connection(ipoque_struct);
+		return;	
+		}
+	if (ntohs(get_u16(packet->payload, 2)) == 0x874e ){
+		if (	   packet->payload[5] == packet->payload[15] 
+			&& packet->payload[5] == packet->payload[17] 
+			&& packet->payload[5] == packet->payload[21] 
+			&& packet->payload[5] == packet->payload[23] 
+//			&& packet->payload[4] == packet->payload[6] 
+			&& packet->payload[4] == packet->payload[8] 
+			&& packet->payload[4] == packet->payload[14] 
+			&& packet->payload[4] == packet->payload[18] 
+			&& packet->payload[4] == packet->payload[22] 
+			&& packet->payload[4] == packet->payload[24] 
+			&& packet->payload[4] != packet->payload[5] ){
+
+		IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "FUNSHION udp detected\n");
+		ipoque_int_funshion_add_connection(ipoque_struct);
+		return;	
+		}
+	}
+
+	IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "exclude funshion.\n");
+	IPOQUE_ADD_PROTOCOL_TO_BITMASK(flow->excluded_protocol_bitmask, IPOQUE_PROTOCOL_FUNSHION);
+}
+void ipoque_int_search_funshion_tcp(struct ipoque_detection_module_struct
+							*ipoque_struct)
+{
+	struct ipoque_packet_struct *packet = &ipoque_struct->packet;
+	struct ipoque_flow_struct *flow = ipoque_struct->flow;
+	// struct ipoque_id_struct *src=ipoque_struct->src;
+	// struct ipoque_id_struct *dst=ipoque_struct->dst;
+
+	if (packet->payload[4] == packet->payload[6] && packet->payload[4] == packet->payload[10] && packet->payload[4] != packet->payload[2]){
+		if ((ntohs(get_u16(packet->payload, 2)) & 0x0fff) == 0x0100){
+			if (packet->payload_packet_len == 18 && packet->payload[14] == 0){
+			IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "FUNSHION tcp detected\n");
+			ipoque_int_funshion_add_connection(ipoque_struct);
+			return;	
+			}
+			if (ntohs(get_u16(packet->payload, packet->payload_packet_len - 2)) == 0x4000 && packet->payload[14] == 0 && (packet->payload_packet_len == 26 || packet->payload_packet_len == 52 || packet->payload_packet_len == 78 || packet->payload_packet_len == 104)){
+			IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "FUNSHION tcp detected\n");
+			ipoque_int_funshion_add_connection(ipoque_struct);
+			return;	
+			}
+			if (packet->payload_packet_len == 54 && packet->payload[14] == 0xe1){
+			IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "FUNSHION tcp detected\n");
+			ipoque_int_funshion_add_connection(ipoque_struct);
+			return;	
+			}
+			if (packet->payload_packet_len == 118 && (get_u16(packet->payload, 14) == 0 || ntohs(get_u16(packet->payload, 14)) == 0xff )){
+			IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "FUNSHION tcp detected\n");
+			ipoque_int_funshion_add_connection(ipoque_struct);
+			return;	
+			}
+		}
+	}
+//	if(){
+//		IPQ_LOG(IPOQUE_PROTOCOL_FUNSHION, ipoque_struct, IPQ_LOG_DEBUG, "exclude funshion.\n");
+//		IPOQUE_ADD_PROTOCOL_TO_BITMASK(flow->excluded_protocol_bitmask, IPOQUE_PROTOCOL_FUNSHION);
+//	}
+}
+
+
+void ipoque_search_funshion(struct ipoque_detection_module_struct *ipoque_struct)
+{
+	struct ipoque_packet_struct *packet = &ipoque_struct->packet;
+	//struct ipoque_flow_struct *flow = ipoque_struct->flow;
+	//struct ipoque_id_struct *src = ipoque_struct->src;
+	//struct ipoque_id_struct *dst = ipoque_struct->dst;
+	
+	if (packet->udp != NULL) {
+		ipoque_int_search_funshion_udp(ipoque_struct);
+	}
+	else if (packet->tcp != NULL  && packet->payload_packet_len != 0 ) {
+		ipoque_int_search_funshion_tcp(ipoque_struct);
+	}
+}
+#endif
