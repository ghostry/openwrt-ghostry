#!/bin/sh
# Copyright (C) 2009-2010 OpenWrt.org
# Copyright (C) 2010 Vertical Communications
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

. /lib/functions/block.sh


set_devices(){
set_section=$(uci show fstab |grep $get_uuid|awk -F "." '{print $2}')
old_device=$(uci get fstab.${set_section}.device)
[ "$old_device" != "/dev/$device" ]&&{
uci set fstab.${set_section}.device="/dev/$device"
uci commit fstab
}
}

set_fstab(){
isntfs=$(fdisk -l | grep "/dev/$device" | grep -c NTFS) 
isvfat=$(fdisk -l | grep "/dev/$device" | grep -c FAT)                       
isswap=$(fdisk -l | grep "/dev/$device" | grep -c swap)  
                  
 if [ "$isntfs" -ge "1" ] ; then                        
     my_fstype=ntfs
	 elif [ "$isvfat" -ge "1" ] ; then  
		my_fstype=vfat
	 elif [ "$isswap" -ge "1" ] ; then  
		my_fstype=swap
	 else  
		my_fstype=ext3
 fi
   if 	[ "$my_fstype" == "swap" ] ; then  
		 j=$(uci show fstab |grep  "fstab.@swap"|grep -c "=swap")
		uci add fstab swap
		uci set fstab.@swap[$j]=swap
		uci set fstab.@swap[$j].uuid="${get_uuid}"
		uci set fstab.@swap[$j].device="/dev/$device" 
		uci set fstab.@swap[$j].enabled=1   

    else
		n=$(uci show fstab |grep  "fstab.@mount"|grep -c "=mount")
		m=$((n+1))
		uci add fstab mount
		uci set fstab.@mount[$n]=mount
		uci set fstab.@mount[$n].uuid="${get_uuid}" 
		uci set fstab.@mount[$n].target="/mnt/sda${m}"
		uci set fstab.@mount[$n].enabled=1
		uci set fstab.@mount[$n].fstype=$my_fstype
		uci set fstab.@mount[$n].device="/dev/$device"

   fi 
   uci commit fstab
}



blkdev=`dirname $DEVPATH`
if [ `basename $blkdev` != "block" ]; then

    device=`basename $DEVPATH`

    case "$ACTION" in
	add)
               get_uuid=$(blkid |grep /dev/${device} |awk -F "UUID=" '{print $2}'|awk -F "\"" '{print $2}') 
              [ -n "$get_uuid" ]&&{            
                      have_uuid="0"
		            [ "$have_uuid" == "0" ]
	              have_uuid=$(uci show fstab |grep -c $get_uuid)
                        [ "$have_uuid" == "0" ]&&set_fstab   
                				 [ "$have_uuid" != "0" ]&&set_devices 	
               }

		local from_fstab
		local anon_mount
		local anon_swap
		local anon_fsck
		local mds_mount_target
		local mds_mount_device
		local mds_mount_fstype
		local sds_swap_device
		local use_device
		local do_fsck=0
		local fsck_type
		
		local autoswap_from_fstab
		local automount_from_fstab

	    mount_dev_section_cb() {
    		mds_mount_target="$2"
			mds_mount_device="$3"
			mds_mount_fstype="$4"
			mds_mount_enabled="$6"
	    }

	    swap_dev_section_cb() { 
			sds_swap_device="$2"
			return 0
	    }

		config_get_automount
		automount_from_fstab="$from_fstab"
		[ "$automount_from_fstab" -eq 1 ] && {
			config_get_mount_section_by_device "/dev/$device"
			use_device="$mds_mount_device"
			[ "$mds_mount_enabled" -eq 1 ] && {
				if [ -n "$mds_mount_target" ]; then
					grep -q "/dev/$device" /proc/swaps || grep -q "/dev/$device" /proc/mounts || {
mkdir -p "$mds_mount_target" 				
					if [ "$mds_mount_fstype" = "ntfs" ];then
				   ntfs-3g -o nls=utf8 /dev/$device $mds_mount_target 2>&1 | tee /proc/self/fd/2 | logger -t 'fstab'
				  elif [ "$mds_mount_fstype" = "vfat" ];then
				     mount -t vfat -o codepage=936,iocharset=cp936 /dev/$device $mds_mount_target 2>&1 | tee /proc/self/fd/2 | logger -t 'fstab'
					else
					 mount /dev/$device $mds_mount_target 2>&1 | tee /proc/self/fd/2 | logger -t 'fstab'
					fi
						
					}
				else
					logger -t 'fstab' "Mount enabled for $mds_mount_device but it doesn't have a defined mountpoint (target)"
				fi
			}
		}

		[ -z "$use_device" ] && {
			config_get_autoswap
			autoswap_from_fstab="$from_fstab"
		
			[ "$autoswap_from_fstab" -eq 1 ] && {
				config_get_swap_section_by_device "/dev/$device"
				use_device="$sds_swap_device"
			}
		}
		
		grep -q "/dev/$device" /proc/swaps || grep -q "/dev/$device" /proc/mounts || {
			[ "$anon_mount" -eq 1 ] && [ -z "$use_device" ] && {
				( mkdir -p /mnt/$device && mount /dev/$device /mnt/$device ) 2>&1 | tee /proc/self/fd/2 | logger -t 'fstab'
			}
		}
		reset_dev_section_cb
		;;
	remove)
		umount /dev/$device
		;;
    esac	

fi

