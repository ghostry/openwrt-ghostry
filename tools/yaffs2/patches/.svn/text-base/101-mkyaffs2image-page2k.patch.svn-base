#
# This patch adds support for larger page NAND
# (1 Page=2KB, Block=128KB, Spare=64B)
# to achieve the yaffs2 image making util : mkyaffs2image-page2k
#
# Signed-off-by: Richard Nee <richard.nee.cn@gmail.com>
#

--- a/yaffs2/utils/Makefile	2012-04-30 08:53:50.000000000 +0800
+++ b/yaffs2/utils/Makefile	2012-05-09 19:25:42.113384339 +0800
@@ -34,7 +34,11 @@
 MKYAFFS2LINKS = yaffs_packedtags2.c yaffs_tagsvalidity.c
 MKYAFFS2IMAGEOBJS = $(MKYAFFS2SOURCES:.c=.o) $(MKYAFFS2LINKS:.c=.o)
 
-all: mkyaffsimage mkyaffs2image
+MKYAFFS2SOURCES_LARGER = mkyaffs2image-page2k.c
+MKYAFFS2LINKS_LARGER = yaffs_packedtags2.c yaffs_tagsvalidity.c
+MKYAFFS2IMAGEOBJS_LARGER = $(MKYAFFS2SOURCES_LARGER:.c=.o) $(MKYAFFS2LINKS_LARGER:.c=.o)
+
+all: mkyaffsimage mkyaffs2image mkyaffs2image-page2k
 
 $(COMMONLINKS) $(MKYAFFSLINKS) $(MKYAFFS2LINKS):
 	ln -s ../$@ $@
@@ -48,6 +52,8 @@
 mkyaffs2image: $(COMMONOBJS) $(MKYAFFS2IMAGEOBJS)
 	$(CC) -o $@ $(COMMONOBJS) $(MKYAFFS2IMAGEOBJS)
 
+mkyaffs2image-page2k: $(COMMONOBJS) $(MKYAFFS2IMAGEOBJS_LARGER)
+	$(CC) -o $@ $(COMMONOBJS) $(MKYAFFS2IMAGEOBJS_LARGER)
 
 clean:
-	rm -f $(COMMONOBJS) $(MKYAFFSIMAGEOBJS) $(MKYAFFS2IMAGEOBJS) $(COMMONLINKS) $(MKYAFFSLINKS) $(MKYAFFS2LINKS) mkyaffsimage mkyaffs2image core
+	rm -f $(COMMONOBJS) $(MKYAFFSIMAGEOBJS) $(MKYAFFS2IMAGEOBJS) $(COMMONLINKS) $(MKYAFFSLINKS) $(MKYAFFS2LINKS) mkyaffsimage mkyaffs2image core mkyaffs2image-page2k $(MKYAFFS2IMAGEOBJS_LARGER) $(MKYAFFS2LINKS_LARGER)
--- /dev/null	1970-01-01 08:00:00.000000000 +0800
+++ b/yaffs2/utils/mkyaffs2image-page2k.c	2012-05-09 16:59:45.253380302 +0800
@@ -0,0 +1,724 @@
+/*
+ * YAFFS: Yet another FFS. A NAND-flash specific file system.
+ *
+ * makeyaffsimage.c 
+ *
+ * Makes a YAFFS file system image that can be used to load up a file system.
+ *
+ * Copyright (C) 2002 Aleph One Ltd.
+ *   for Toby Churchill Ltd and Brightstar Engineering
+ *
+ * Created by Charles Manning <charles@aleph1.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ *
+ * Nick Bane modifications flagged NCB
+ *
+ * Endian handling patches by James Ng.
+ * 
+ * mkyaffs2image hacks by NCB
+ *
+ */
+ 
+#include <stdlib.h>
+#include <stdio.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <dirent.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "yaffs_ecc.h"
+#include "yaffs_guts.h"
+
+#include "yaffs_tagsvalidity.h"
+#include "yaffs_packedtags2.h"
+
+typedef unsigned char		u_char;
+typedef unsigned short		u_short;
+typedef unsigned int		u_int;
+typedef unsigned long		u_long;
+
+typedef unsigned char		uint8_t;
+typedef unsigned short		uint16_t;
+typedef unsigned int		uint32_t;
+
+unsigned source_path_len = 0;
+unsigned yaffs_traceMask=0;
+
+#define MAX_OBJECTS 50000
+
+#define chunkSize 2048
+#define spareSize 64
+
+const char * mkyaffsimage_c_version = "$Id: mkyaffs2image.c,v 1.2 2005/12/13 00:34:58 tpoynor Exp $";
+
+
+typedef struct
+{
+	dev_t dev;
+	ino_t ino;
+	int   obj;
+} objItem;
+
+
+static objItem obj_list[MAX_OBJECTS];
+static int n_obj = 0;
+static int obj_id = YAFFS_NOBJECT_BUCKETS + 1;
+
+static int nObjects, nDirectories, nPages;
+
+static int outFile;
+
+static int error;
+
+#if BYTE_ORDER == BIG_ENDIAN
+static int convert_endian = 1;
+#elif BYTE_ORDER == LITTLE_ENDIAN
+static int convert_endian = 0;
+#else
+#error Unknown endian type
+#endif
+
+struct nand_oobinfo {
+	uint32_t useecc;
+	uint32_t eccbytes;
+	uint32_t oobfree[8][2];
+	uint32_t eccpos[32];
+};
+
+/* ECC byte placement */
+#define MTD_NANDECC_OFF		0	// Switch off ECC (Not recommended)
+#define MTD_NANDECC_PLACE	1	// Use the given placement in the structure (YAFFS1 legacy mode)
+#define MTD_NANDECC_AUTOPLACE	2	// Use the default placement scheme
+#define MTD_NANDECC_PLACEONLY	3	// Use the given placement in the structure (Do not store ecc result on read)
+#define MTD_NANDECC_AUTOPL_USR 	4	// Use the given autoplacement scheme rather than using the default
+
+static struct nand_oobinfo nand_oob_64 = {
+	.useecc = MTD_NANDECC_AUTOPLACE,
+	.eccbytes = 24,
+	.eccpos = {
+		40, 41, 42, 43, 44, 45, 46, 47, 
+		48, 49, 50, 51, 52, 53, 54, 55, 
+		56, 57, 58, 59, 60, 61, 62, 63},
+	.oobfree = { {2, 38} }
+};
+
+static u_char oob_buf[spareSize];
+
+static int obj_compare(const void *a, const void * b)
+{
+  objItem *oa, *ob;
+  
+  oa = (objItem *)a;
+  ob = (objItem *)b;
+  
+  if(oa->dev < ob->dev) return -1;
+  if(oa->dev > ob->dev) return 1;
+  if(oa->ino < ob->ino) return -1;
+  if(oa->ino > ob->ino) return 1;
+  
+  return 0;
+}
+
+
+static void add_obj_to_list(dev_t dev, ino_t ino, int obj)
+{
+	if(n_obj < MAX_OBJECTS)
+	{
+		obj_list[n_obj].dev = dev;
+		obj_list[n_obj].ino = ino;
+		obj_list[n_obj].obj = obj;
+		n_obj++;
+		qsort(obj_list,n_obj,sizeof(objItem),obj_compare);
+		
+	}
+	else
+	{
+		// oops! not enough space in the object array
+		fprintf(stderr,"Not enough space in object array\n");
+		exit(2);
+	}
+}
+
+
+static int find_obj_in_list(dev_t dev, ino_t ino)
+{
+	objItem *i = NULL;
+	objItem test;
+
+	test.dev = dev;
+	test.ino = ino;
+	
+	if(n_obj > 0)
+	{
+		i = bsearch(&test,obj_list,n_obj,sizeof(objItem),obj_compare);
+	}
+
+	if(i)
+	{
+		return i->obj;
+	}
+	return -1;
+}
+
+#define SWAP32(x)   ((((x) & 0x000000FF) << 24) | \
+                     (((x) & 0x0000FF00) << 8 ) | \
+                     (((x) & 0x00FF0000) >> 8 ) | \
+                     (((x) & 0xFF000000) >> 24))
+
+#define SWAP16(x)   ((((x) & 0x00FF) << 8) | \
+                     (((x) & 0xFF00) >> 8))
+        
+// This one is easier, since the types are more standard. No funky shifts here.
+static void object_header_little_to_big_endian(yaffs_ObjectHeader* oh)
+{
+    oh->type = SWAP32(oh->type); // GCC makes enums 32 bits.
+    oh->parentObjectId = SWAP32(oh->parentObjectId); // int
+    oh->sum__NoLongerUsed = SWAP16(oh->sum__NoLongerUsed); // __u16 - Not used, but done for completeness.
+    // name = skip. Char array. Not swapped.
+    oh->yst_mode = SWAP32(oh->yst_mode);
+#ifdef CONFIG_YAFFS_WINCE // WinCE doesn't implement this, but we need to just in case. 
+    // In fact, WinCE would be *THE* place where this would be an issue!
+    oh->notForWinCE[0] = SWAP32(oh->notForWinCE[0]);
+    oh->notForWinCE[1] = SWAP32(oh->notForWinCE[1]);
+    oh->notForWinCE[2] = SWAP32(oh->notForWinCE[2]);
+    oh->notForWinCE[3] = SWAP32(oh->notForWinCE[3]);
+    oh->notForWinCE[4] = SWAP32(oh->notForWinCE[4]);
+#else
+    // Regular POSIX.
+    oh->yst_uid = SWAP32(oh->yst_uid);
+    oh->yst_gid = SWAP32(oh->yst_gid);
+    oh->yst_atime = SWAP32(oh->yst_atime);
+    oh->yst_mtime = SWAP32(oh->yst_mtime);
+    oh->yst_ctime = SWAP32(oh->yst_ctime);
+#endif
+
+    oh->fileSize = SWAP32(oh->fileSize); // Aiee. An int... signed, at that!
+    oh->equivalentObjectId = SWAP32(oh->equivalentObjectId);
+    // alias  - char array.
+    oh->yst_rdev = SWAP32(oh->yst_rdev);
+
+#ifdef CONFIG_YAFFS_WINCE
+    oh->win_ctime[0] = SWAP32(oh->win_ctime[0]);
+    oh->win_ctime[1] = SWAP32(oh->win_ctime[1]);
+    oh->win_atime[0] = SWAP32(oh->win_atime[0]);
+    oh->win_atime[1] = SWAP32(oh->win_atime[1]);
+    oh->win_mtime[0] = SWAP32(oh->win_mtime[0]);
+    oh->win_mtime[1] = SWAP32(oh->win_mtime[1]);
+    oh->roomToGrow[0] = SWAP32(oh->roomToGrow[0]);
+    oh->roomToGrow[1] = SWAP32(oh->roomToGrow[1]);
+    oh->roomToGrow[2] = SWAP32(oh->roomToGrow[2]);
+    oh->roomToGrow[3] = SWAP32(oh->roomToGrow[3]);
+    oh->roomToGrow[4] = SWAP32(oh->roomToGrow[4]);
+    oh->roomToGrow[5] = SWAP32(oh->roomToGrow[5]);
+#else
+    oh->roomToGrow[0] = SWAP32(oh->roomToGrow[0]);
+    oh->roomToGrow[1] = SWAP32(oh->roomToGrow[1]);
+    oh->roomToGrow[2] = SWAP32(oh->roomToGrow[2]);
+    oh->roomToGrow[3] = SWAP32(oh->roomToGrow[3]);
+    oh->roomToGrow[4] = SWAP32(oh->roomToGrow[4]);
+    oh->roomToGrow[5] = SWAP32(oh->roomToGrow[5]);
+    oh->roomToGrow[6] = SWAP32(oh->roomToGrow[6]);
+    oh->roomToGrow[7] = SWAP32(oh->roomToGrow[7]);
+    oh->roomToGrow[8] = SWAP32(oh->roomToGrow[8]);
+    oh->roomToGrow[9] = SWAP32(oh->roomToGrow[9]);
+    oh->roomToGrow[10] = SWAP32(oh->roomToGrow[10]);
+    oh->roomToGrow[11] = SWAP32(oh->roomToGrow[11]);
+#endif
+}
+
+/*
+ * Pre-calculated 256-way 1 byte column parity
+ */
+static const u_char nand_ecc_precalc_table[] = {
+	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00,
+	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
+	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
+	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
+	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
+	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
+	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
+	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
+	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
+	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
+	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
+	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
+	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
+	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
+	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
+	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00
+};
+
+
+/**
+ * nand_trans_result - [GENERIC] create non-inverted ECC
+ * @reg2:	line parity reg 2
+ * @reg3:	line parity reg 3
+ * @ecc_code:	ecc 
+ *
+ * Creates non-inverted ECC code from line parity
+ */
+static void nand_trans_result(u_char reg2, u_char reg3,
+	u_char *ecc_code)
+{
+	u_char a, b, i, tmp1, tmp2;
+	
+	/* Initialize variables */
+	a = b = 0x80;
+	tmp1 = tmp2 = 0;
+	
+	/* Calculate first ECC byte */
+	for (i = 0; i < 4; i++) {
+		if (reg3 & a)		/* LP15,13,11,9 --> ecc_code[0] */
+			tmp1 |= b;
+		b >>= 1;
+		if (reg2 & a)		/* LP14,12,10,8 --> ecc_code[0] */
+			tmp1 |= b;
+		b >>= 1;
+		a >>= 1;
+	}
+	
+	/* Calculate second ECC byte */
+	b = 0x80;
+	for (i = 0; i < 4; i++) {
+		if (reg3 & a)		/* LP7,5,3,1 --> ecc_code[1] */
+			tmp2 |= b;
+		b >>= 1;
+		if (reg2 & a)		/* LP6,4,2,0 --> ecc_code[1] */
+			tmp2 |= b;
+		b >>= 1;
+		a >>= 1;
+	}
+	
+	/* Store two of the ECC bytes */
+	ecc_code[0] = tmp1;
+	ecc_code[1] = tmp2;
+}
+
+/**
+ * nand_calculate_ecc - [NAND Interface] Calculate 3 byte ECC code for 256 byte block
+ * @mtd:	MTD block structure
+ * @dat:	raw data
+ * @ecc_code:	buffer for ECC
+ */
+int nand_calculate_ecc(const u_char *dat, u_char *ecc_code)
+{
+	u_char idx, reg1, reg2, reg3;
+	int j;
+	
+	/* Initialize variables */
+	reg1 = reg2 = reg3 = 0;
+	ecc_code[0] = ecc_code[1] = ecc_code[2] = 0;
+	
+	/* Build up column parity */ 
+	for(j = 0; j < 256; j++) {
+		
+		/* Get CP0 - CP5 from table */
+		idx = nand_ecc_precalc_table[dat[j]];
+		reg1 ^= (idx & 0x3f);
+		
+		/* All bit XOR = 1 ? */
+		if (idx & 0x40) {
+			reg3 ^= (u_char) j;
+			reg2 ^= ~((u_char) j);
+		}
+	}
+	
+	/* Create non-inverted ECC code from line parity */
+	nand_trans_result(reg2, reg3, ecc_code);
+	
+	/* Calculate final ECC code */
+	ecc_code[0] = ~ecc_code[0];
+	ecc_code[1] = ~ecc_code[1];
+	ecc_code[2] = ((~reg1) << 2) | 0x03;
+	return 0;
+}
+
+
+/** 
+ * nand_prepare_oobbuf - [GENERIC] Prepare the out of band buffer 
+ * @fsbuf:	buffer given by fs driver
+ * @oobsel:	out of band selection structre
+ * @autoplace:	1 = place given buffer into the oob bytes
+ * @numpages:	number of pages to prepare
+ *
+ * Return:
+ * 1. Filesystem buffer available and autoplacement is off,
+ *    return filesystem buffer
+ * 2. No filesystem buffer or autoplace is off, return internal
+ *    buffer
+ * 3. Filesystem buffer is given and autoplace selected
+ *    put data from fs buffer into internal buffer and
+ *    retrun internal buffer
+ *
+ * Note: The internal buffer is filled with 0xff. This must
+ * be done only once, when no autoplacement happens
+ * Autoplacement sets the buffer dirty flag, which
+ * forces the 0xff fill before using the buffer again.
+ *
+*/
+static void nand_prepare_oobbuf (u_char *oob_buf, u_char *fs_buf, struct nand_oobinfo *oobsel)
+{
+	int i;
+
+	for (i = 0; oobsel->oobfree[i][1]; i++) {
+		int to = oobsel->oobfree[i][0];
+		int num = oobsel->oobfree[i][1];
+		memcpy (&oob_buf[to], fs_buf, num);
+		fs_buf += num;
+	}	
+}
+
+/* This little function converts a little endian tag to a big endian tag.
+ * NOTE: The tag is not usable after this other than calculating the CRC
+ * with.
+ */
+static void little_to_big_endian(yaffs_PackedTags2 *pt)
+{
+	pt->t.sequenceNumber = SWAP32(pt->t.sequenceNumber);
+	pt->t.objectId = SWAP32(pt->t.objectId);
+	pt->t.chunkId = SWAP32(pt->t.chunkId);
+	pt->t.byteCount = SWAP32(pt->t.byteCount);
+}
+
+static int write_chunk(__u8 *data, __u32 objId, __u32 chunkId, __u32 nBytes)
+{
+	yaffs_ExtendedTags t;
+	yaffs_PackedTags2 pt;
+
+	__u8 ecc_code[3];
+	int i;
+
+	error = write(outFile,data,chunkSize);
+	if(error < 0) return error;
+
+	yaffs_InitialiseTags(&t);
+	
+	t.chunkId = chunkId;
+//	t.serialNumber = 0;
+	t.serialNumber = 1;	// **CHECK**
+	t.byteCount = nBytes;
+	t.objectId = objId;
+	
+	t.sequenceNumber = YAFFS_LOWEST_SEQUENCE_NUMBER;
+
+// added NCB **CHECK**
+	t.chunkUsed = 1;
+
+	nPages++;
+
+	yaffs_PackTags2(&pt,&t);
+
+	if (convert_endian)
+	{
+    	    little_to_big_endian(&pt);
+	}
+	
+//	return write(outFile,&pt,sizeof(yaffs_PackedTags2));
+
+	memset(oob_buf, 0xff, sizeof(oob_buf));
+	nand_prepare_oobbuf(oob_buf, (u_char *)&pt, &nand_oob_64);
+
+	for (i = 0; i < chunkSize/256; i++) {
+	    nand_calculate_ecc(data+i*256, ecc_code);
+		oob_buf[nand_oob_64.eccpos[i*3]] = ecc_code[0];
+		oob_buf[nand_oob_64.eccpos[i*3]+1] = ecc_code[1];
+		oob_buf[nand_oob_64.eccpos[i*3]+2] = ecc_code[2];
+	}
+	
+	return write(outFile,oob_buf,spareSize);
+	
+}
+
+static int write_object_header(int objId, yaffs_ObjectType t, struct stat *s, int parent, const char *name, int equivalentObj, const char * alias)
+{
+	__u8 bytes[chunkSize];
+	
+	
+	yaffs_ObjectHeader *oh = (yaffs_ObjectHeader *)bytes;
+	
+	memset(bytes,0xff,sizeof(bytes));
+	
+	oh->type = t;
+
+	oh->parentObjectId = parent;
+	
+	strncpy(oh->name,name,YAFFS_MAX_NAME_LENGTH);
+	
+	
+	if(t != YAFFS_OBJECT_TYPE_HARDLINK)
+	{
+		oh->yst_mode = s->st_mode;
+		oh->yst_uid = s->st_uid;
+// NCB 12/9/02		oh->yst_gid = s->yst_uid;
+		oh->yst_gid = s->st_gid;
+		oh->yst_atime = s->st_atime;
+		oh->yst_mtime = s->st_mtime;
+		oh->yst_ctime = s->st_ctime;
+		oh->yst_rdev  = s->st_rdev;
+	}
+	
+	if(t == YAFFS_OBJECT_TYPE_FILE)
+	{
+		oh->fileSize = s->st_size;
+	}
+	
+	if(t == YAFFS_OBJECT_TYPE_HARDLINK)
+	{
+		oh->equivalentObjectId = equivalentObj;
+	}
+	
+	if(t == YAFFS_OBJECT_TYPE_SYMLINK)
+	{
+		strncpy(oh->alias,alias,YAFFS_MAX_ALIAS_LENGTH);
+	}
+
+	if (convert_endian)
+	{
+    		object_header_little_to_big_endian(oh);
+	}
+	
+	return write_chunk(bytes,objId,0,0xffff);
+	
+}
+
+static void fix_stat(const char *path, struct stat *s)
+{
+	s->st_uid = 0;
+	s->st_gid = 0;
+}
+
+static int process_directory(int parent, const char *path, int fixstats)
+{
+
+	DIR *dir;
+	struct dirent *entry;
+
+	nDirectories++;
+	
+	dir = opendir(path);
+	
+	if(dir)
+	{
+		while((entry = readdir(dir)) != NULL)
+		{
+		
+			/* Ignore . and .. */
+			if(strcmp(entry->d_name,".") &&
+			   strcmp(entry->d_name,".."))
+ 			{
+ 				char full_name[500];
+				struct stat stats;
+				int equivalentObj;
+				int newObj;
+				
+				sprintf(full_name,"%s/%s",path,entry->d_name);
+				
+				lstat(full_name,&stats);
+				
+				if(S_ISLNK(stats.st_mode) ||
+				    S_ISREG(stats.st_mode) ||
+				    S_ISDIR(stats.st_mode) ||
+				    S_ISFIFO(stats.st_mode) ||
+				    S_ISBLK(stats.st_mode) ||
+				    S_ISCHR(stats.st_mode) ||
+				    S_ISSOCK(stats.st_mode))
+				{
+				
+					newObj = obj_id++;
+					nObjects++;
+
+                    if (fixstats)
+                        fix_stat(full_name, &stats);
+
+					//printf("Object %d, %s is a ",newObj,full_name);
+					
+					/* We're going to create an object for it */
+					if((equivalentObj = find_obj_in_list(stats.st_dev, stats.st_ino)) > 0)
+					{
+					 	/* we need to make a hard link */
+					 	//printf("hard link to object %d\n",equivalentObj);
+						error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_HARDLINK, &stats, parent, entry->d_name, equivalentObj, NULL);
+					}
+					else 
+					{
+						
+						add_obj_to_list(stats.st_dev,stats.st_ino,newObj);
+						
+						if(S_ISLNK(stats.st_mode))
+						{
+					
+							char symname[500];
+						
+							memset(symname,0, sizeof(symname));
+					
+							readlink(full_name,symname,sizeof(symname) -1);
+						
+							//printf("symlink to \"%s\"\n",symname);
+							error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_SYMLINK, &stats, parent, entry->d_name, -1, symname);
+
+						}
+						else if(S_ISREG(stats.st_mode))
+						{
+							//printf("file, ");
+							error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_FILE, &stats, parent, entry->d_name, -1, NULL);
+
+							if(error >= 0)
+							{
+								int h;
+								__u8 bytes[chunkSize];
+								int nBytes;
+								int chunk = 0;
+								
+								h = open(full_name,O_RDONLY);
+								if(h >= 0)
+								{
+									memset(bytes,0xff,sizeof(bytes));
+									while((nBytes = read(h,bytes,sizeof(bytes))) > 0)
+									{
+										chunk++;
+										write_chunk(bytes,newObj,chunk,nBytes);
+										memset(bytes,0xff,sizeof(bytes));
+									}
+									if(nBytes < 0) 
+									   error = nBytes;
+									   
+									//printf("%d data chunks written\n",chunk);
+								}
+								else
+								{
+									perror("Error opening file");
+								}
+								close(h);
+								
+							}							
+														
+						}
+						else if(S_ISSOCK(stats.st_mode))
+						{
+							//printf("socket\n");
+							error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_SPECIAL, &stats, parent, entry->d_name, -1, NULL);
+						}
+						else if(S_ISFIFO(stats.st_mode))
+						{
+							//printf("fifo\n");
+							error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_SPECIAL, &stats, parent, entry->d_name, -1, NULL);
+						}
+						else if(S_ISCHR(stats.st_mode))
+						{
+							//printf("character device\n");
+							error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_SPECIAL, &stats, parent, entry->d_name, -1, NULL);
+						}
+						else if(S_ISBLK(stats.st_mode))
+						{
+							//printf("block device\n");
+							error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_SPECIAL, &stats, parent, entry->d_name, -1, NULL);
+						}
+						else if(S_ISDIR(stats.st_mode))
+						{
+							//printf("directory\n");
+							error =  write_object_header(newObj, YAFFS_OBJECT_TYPE_DIRECTORY, &stats, parent, entry->d_name, -1, NULL);
+// NCB modified 10/9/2001				process_directory(1,full_name);
+							process_directory(newObj,full_name,fixstats);
+						}
+					}
+				}
+				else
+				{
+					//printf(" we don't handle this type\n");
+				}
+			}
+		}
+
+		closedir(dir);
+	}
+	
+	return 0;
+
+}
+
+
+int main(int argc, char *argv[])
+{
+    int fixstats = 0;
+	struct stat stats;
+	
+	if (argc > 1) {
+        if (strcmp(argv[1], "-f") == 0) {
+            fixstats = 1;
+            argc--;
+            argv++;
+        }
+    }
+
+	if(argc < 3)
+	{
+	    fprintf(stderr,"mkyaffs2image: image building tool for YAFFS2 built "__DATE__"\n");
+		fprintf(stderr,"usage: mkyaffs2image [-f] dir image_file [convert]\n");
+        fprintf(stderr,"           -f         fix file stat (mods, user, group) for device\n");
+		fprintf(stderr,"           dir        the directory tree to be converted\n");
+		fprintf(stderr,"           image_file the output file to hold the image\n");
+        fprintf(stderr,"           'convert'  produce a big-endian image\n");
+		exit(1);
+	}
+
+    if ((argc == 4) && (!strncmp(argv[3], "convert", strlen("convert"))))
+    {
+        convert_endian = !convert_endian;
+    }
+    
+	if(stat(argv[1],&stats) < 0)
+	{
+		fprintf(stderr,"Could not stat %s\n",argv[1]);
+		exit(1);
+	}
+	
+	if(!S_ISDIR(stats.st_mode))
+	{
+		fprintf(stderr," %s is not a directory\n",argv[1]);
+		exit(1);
+	}
+	
+	outFile = open(argv[2],O_CREAT | O_TRUNC | O_WRONLY, S_IREAD | S_IWRITE);
+	
+	
+	if(outFile < 0)
+	{
+		fprintf(stderr,"Could not open output file %s\n",argv[2]);
+		exit(1);
+	}
+
+    if (fixstats)
+        fix_stat(argv[1], &stats);
+
+	//printf("Processing directory %s into image file %s\n",argv[1],argv[2]);
+	error =  write_object_header(1, YAFFS_OBJECT_TYPE_DIRECTORY, &stats, 1,"", -1, NULL);
+	if(error)
+	error = process_directory(YAFFS_OBJECTID_ROOT,argv[1],fixstats);
+	
+	close(outFile);
+	
+	if(error < 0)
+	{
+		perror("operation incomplete");
+		exit(1);
+	}
+	else
+	{
+        /*
+		printf("Operation complete.\n"
+		       "%d objects in %d directories\n"
+		       "%d NAND pages\n",nObjects, nDirectories, nPages);
+        */
+	}
+	
+	close(outFile);
+	
+	exit(0);
+}	
+
--- a/yaffs2/yaffs_packedtags2.c	2009-02-15 23:23:50.000000000 +0800
+++ b/yaffs2/yaffs_packedtags2.c	2012-05-09 19:16:49.105384093 +0800
@@ -39,9 +39,11 @@
 #define EXTRA_OBJECT_TYPE_SHIFT (28)
 #define EXTRA_OBJECT_TYPE_MASK  ((0x0F) << EXTRA_OBJECT_TYPE_SHIFT)
 
+#if 0
 #ifndef CONFIG_YAFFS_DOES_ECC
 #define YAFFS_IGNORE_TAGS_ECC 1
 #endif
+#endif
 
 static void yaffs_DumpPackedTags2(const yaffs_PackedTags2 * pt)
 {
